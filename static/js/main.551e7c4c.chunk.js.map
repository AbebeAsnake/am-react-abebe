{"version":3,"sources":["components/ProgressBar/ProgressBar.js","components/TextInput/TextInput.js","components/EyeIcon/EyeIcon.js","components/PasswordInput/PasswordInput.js","components/TextInputCSSModules/textInput.module.css","../config/componentData.js","docs/examples/EyeIcon/Example.js","docs/examples sync /^/.*$","docs/examples/Label/ExampleOptional.js","docs/Navigation.js","docs/CodeExample.js","docs/Example.js","docs/Props.js","docs/ComponentPage.js","docs/Docs.js","reportWebVitals.js","index.js","docs/examples/Label/ExampleRequired.js","docs/examples/PasswordInput/ExampleAllFeatures.js","docs/examples/ProgressBar/Example100Percent.js","docs/examples/ProgressBar/Example10Percent.js","docs/examples/ProgressBar/Example70Percent.js","docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOptional.js","components/HelloWorld/HelloWorld.js","docs/examples/HelloWorld/ExampleHelloWorld.js","components/RegistrationForm/RegistrationForm.js","docs/examples/RegistrationForm/ExampleRegistrationForm.js","components/TextInputBEM/TextInputBEM.js","docs/examples/TextInputBEM/ExampleError.js","components/TextInputCSSModules/TextInputCSSModules.js","docs/examples/TextInputCSSModules/ExampleError.js","components/TextInputStyledComponents/TextInputStyledComponents.js","docs/examples/TextInputStyledComponents/ExampleError.js","components/Label/Label.js"],"names":["ProgressBar","getColor","percent","props","getWidthAsPercentOfTotalWidth","parseInt","width","this","height","style","border","backgroundColor","React","Component","defaultProps","TextInput","htmlId","name","label","type","required","onChange","placeholder","value","error","children","marginBottom","Label","htmlFor","id","className","color","EyeIcon","xmlns","viewBox","transform","fill","d","cx","cy","r","PasswordInput","toggleShowPassword","event","setState","prevState","showPassword","preventDefault","state","maxLength","showVisibilityToggle","quality","href","onClick","marginLeft","length","module","exports","EyeIconExample","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","ExampleOptional","Navigation","components","CodeExample","ref","element","Example","toggleCode","showCode","example","description","ExampleComponent","require","componentName","default","Props","key","defaultValue","ComponentPage","component","examples","Docs","route","window","location","hash","substr","addEventListener","componentData","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","ExampleRequired","ExampleAllFeatures","password","target","minLength","getQuality","Example10Percent","ExampleError","HelloWorld","message","ExampleHelloWorld","RegistrationForm","user","onSubmit","validate","submitted","email","errors","minPasswordLength","getOwnPropertyNames","confirmationMessage","passwordQuality","ExampleRegistrationForm","console","log","TextInputBEM","styles","fieldset","inputError","errror","TextInputCSSModules","styled","div","Input","input","Fieldset","display"],"mappings":"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","file":"static/js/main.551e7c4c.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ProgressBar extends React.Component {\r\n    static propTypes = {\r\n       // Percent of progress completed \r\n        percent: PropTypes.number.isRequired,\r\n      \r\n        /** Bar width */\r\n        width: PropTypes.number.isRequired,\r\n      \r\n        /** Bar height */\r\n        height: PropTypes.number\r\n      };\r\n      \r\n      static defaultProps = {\r\n        height: 5\r\n      };\r\n  getColor = (percent) => {\r\n    if (this.props.percent === 100) return 'green';\r\n    return this.props.percent > 50 ? 'lightgreen' : 'red';\r\n  }\r\n\r\n  getWidthAsPercentOfTotalWidth = () => {\r\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\r\n  }\r\n\r\n  render() {\r\n    const {percent, width, height} = this.props;\r\n    return (\r\n      <div style={{border: 'solid 1px lightgray', width: width}}>\r\n        <div style={{\r\n          width: this.getWidthAsPercentOfTotalWidth(),\r\n          height,\r\n          backgroundColor: this.getColor(percent)\r\n        }} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n /**ProgressBar.propTypes = {\r\n  Percent of progress completed \r\n  percent: PropTypes.number.isRequired,\r\n\r\n  /** Bar width \r\n  width: PropTypes.number.isRequired,\r\n\r\n  /** Bar height \r\n  height: PropTypes.number\r\n};\r\n\r\nProgressBar.defaultProps = {\r\n  height: 5\r\n};*/\r\n\r\nexport default ProgressBar;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Label from '../Label';\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\r\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\r\n  return (\r\n    <div style={{marginBottom: 16}}>\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        style={error && {border: 'solid 1px red'}}\r\n        {...props}/>\r\n        {children}\r\n      {error && <div className=\"error\" style={{color: 'red'}}>{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nTextInput.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input type */\r\n  type: PropTypes.oneOf(['text', 'number', 'password']),\r\n\r\n  /** Mark label with asterisk if set to true */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occurs */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default TextInput;","import React from 'react';\r\n\r\n/** SVG Eye Icon */\r\nfunction EyeIcon() {\r\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\r\n  return (\r\n    <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\r\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\r\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\r\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\r\n      </g>\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default EyeIcon;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ProgressBar from '../ProgressBar';\r\nimport EyeIcon from '../EyeIcon';\r\nimport TextInput from '../TextInput';\r\n\r\n/** Password input with integrated label, quality tips, and show password toggle. */\r\nclass PasswordInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showPassword: false\r\n    }\r\n  }\r\n\r\n  toggleShowPassword = event => {\r\n    this.setState(prevState => {\r\n      return { showPassword: !prevState.showPassword };\r\n    });\r\n    if (event) event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\r\n    const { showPassword } = this.state;\r\n\r\n    return (\r\n      <TextInput\r\n        htmlId={htmlId}\r\n        label={label}\r\n        placeholder={placeholder}\r\n        type={showPassword ? 'text' : 'password'}\r\n        onChange={onChange}\r\n        value={value}\r\n        maxLength={maxLength}\r\n        error={error}\r\n        required\r\n        {...props}>\r\n        {\r\n          showVisibilityToggle &&\r\n          <a\r\n            href=\"\"\r\n            onClick={this.toggleShowPassword}\r\n            style={{ marginLeft: 5 }}>\r\n            <EyeIcon />\r\n          </a>\r\n        }\r\n        {\r\n          value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\r\n        }\r\n      </TextInput>\r\n    );\r\n  }\r\n}\r\n\r\nPasswordInput.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Password value */\r\n  value: PropTypes.any,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string,\r\n\r\n  /** Function called when password input value changes */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Max password length accepted */\r\n  maxLength: PropTypes.number,\r\n\r\n  /** Placeholder displayed when no password is entered */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Set to true to show the toggle for displaying the currently entered password */\r\n  showVisibilityToggle: PropTypes.bool,\r\n\r\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\r\n  quality: PropTypes.number,\r\n\r\n  /** Validation error to display */\r\n  error: PropTypes.string\r\n};\r\n\r\nPasswordInput.defaultProps = {\r\n  maxLength: 50,\r\n  showVisibilityToggle: false,\r\n  label: 'Password'\r\n};\r\n\r\nexport default PasswordInput;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"textInput_error__1CyYD\",\"inputError\":\"textInput_inputError__2iXse\",\"fieldset\":\"textInput_fieldset__KkWc_\"};","module.exports = /* eslint-disable */ [{\"name\":\"EyeIcon\",\"description\":\"SVG Eye Icon\",\"code\":\"import React from 'react';\\r\\n\\r\\n/** SVG Eye Icon */\\r\\nfunction EyeIcon() {\\r\\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\\r\\n  return (\\r\\n    <svg width=\\\"16\\\" height=\\\"16\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 22 22\\\">\\r\\n      <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill=\\\"#4d4d4d\\\">\\r\\n        <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\r\\n        <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\r\\n      </g>\\r\\n    </svg>\\r\\n  )\\r\\n}\\r\\n\\r\\nexport default EyeIcon;\",\"examples\":[{\"name\":\"Example\",\"description\":\"\",\"code\":\"import React from 'react';\\r\\nimport EyeIcon from 'am-react-abebe/EyeIcon';\\r\\n\\r\\nexport default function EyeIconExample() {\\r\\n  return <EyeIcon />;\\r\\n}\"}]},{\"name\":\"HelloWorld\",\"description\":\"A super lame component that says hello world with a custom message\",\"props\":{\"message\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message to display\",\"defaultValue\":{\"value\":\"'world'\",\"computed\":false}}},\"code\":\"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\n/** A super lame component that says hello world with a custom message  */\\r\\nfunction HelloWorld({message}){\\r\\n\\r\\n    return <div>Hello{message}</div>\\r\\n}\\r\\nHelloWorld.propTypes = {\\r\\n    /** Message to display */\\r\\n    message: PropTypes.string\\r\\n}\\r\\nHelloWorld.defaultProps ={\\r\\n    message: 'world'\\r\\n}\\r\\nexport default HelloWorld;\",\"examples\":[{\"name\":\"ExampleHelloWorld\",\"description\":\"Custom message\",\"code\":\"import React from 'react';\\r\\nimport HelloWorld from 'am-react-abebe/HelloWorld';\\r\\n\\r\\n/** Custom message */\\r\\nexport default function ExampleHelloWorld() {\\r\\n  return <HelloWorld message=\\\"Pluralsight viewers!\\\" />\\r\\n}\"}]},{\"name\":\"Label\",\"description\":\"Label with required field display, htmlFor, and block styling\",\"props\":{\"htmlFor\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"HTML ID for associated input\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Label text\"},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Display asterisk after label if true\"}},\"code\":\"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\n\\r\\n/** Label with required field display, htmlFor, and block styling */\\r\\nfunction Label({htmlFor, label, required}) {\\r\\n  return (\\r\\n    <label style={{display: 'block'}} htmlFor={htmlFor}>\\r\\n      {label} { required && <span style={{color: 'red'}}> *</span> }\\r\\n    </label>\\r\\n  )\\r\\n}\\r\\n\\r\\nLabel.propTypes = {\\r\\n  /** HTML ID for associated input */\\r\\n  htmlFor: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Label text */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Display asterisk after label if true */\\r\\n  required: PropTypes.bool\\r\\n};\\r\\n\\r\\nexport default Label;\",\"examples\":[{\"name\":\"ExampleOptional\",\"description\":\"Optional label\",\"code\":\"import React from 'react';\\r\\nimport Label from 'am-react-abebe/Label';\\r\\n\\r\\n/** Optional label */\\r\\nexport default function ExampleOptional() {\\r\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" />\\r\\n}\"},{\"name\":\"ExampleRequired\",\"description\":\"Required label\",\"code\":\"import React from 'react';\\r\\nimport Label from 'am-react-abebe/Label';\\r\\n\\r\\n/** Required label */\\r\\nexport default function ExampleRequired() {\\r\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" required />\\r\\n}\"}]},{\"name\":\"PasswordInput\",\"description\":\"Password input with integrated label, quality tips, and show password toggle.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Password value\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Input label\",\"defaultValue\":{\"value\":\"'Password'\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function called when password input value changes\"},\"maxLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Max password length accepted\",\"defaultValue\":{\"value\":\"50\",\"computed\":false}},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder displayed when no password is entered\"},\"showVisibilityToggle\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to true to show the toggle for displaying the currently entered password\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"quality\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Display password quality visually via ProgressBar, accepts a number between 0 and 100\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Validation error to display\"}},\"code\":\"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport ProgressBar from '../ProgressBar';\\r\\nimport EyeIcon from '../EyeIcon';\\r\\nimport TextInput from '../TextInput';\\r\\n\\r\\n/** Password input with integrated label, quality tips, and show password toggle. */\\r\\nclass PasswordInput extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      showPassword: false\\r\\n    }\\r\\n  }\\r\\n\\r\\n  toggleShowPassword = event => {\\r\\n    this.setState(prevState => {\\r\\n      return { showPassword: !prevState.showPassword };\\r\\n    });\\r\\n    if (event) event.preventDefault();\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\\r\\n    const { showPassword } = this.state;\\r\\n\\r\\n    return (\\r\\n      <TextInput\\r\\n        htmlId={htmlId}\\r\\n        label={label}\\r\\n        placeholder={placeholder}\\r\\n        type={showPassword ? 'text' : 'password'}\\r\\n        onChange={onChange}\\r\\n        value={value}\\r\\n        maxLength={maxLength}\\r\\n        error={error}\\r\\n        required\\r\\n        {...props}>\\r\\n        {\\r\\n          showVisibilityToggle &&\\r\\n          <a\\r\\n            href=\\\"\\\"\\r\\n            onClick={this.toggleShowPassword}\\r\\n            style={{ marginLeft: 5 }}>\\r\\n            <EyeIcon />\\r\\n          </a>\\r\\n        }\\r\\n        {\\r\\n          value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\\r\\n        }\\r\\n      </TextInput>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nPasswordInput.propTypes = {\\r\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Password value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** Input label */\\r\\n  label: PropTypes.string,\\r\\n\\r\\n  /** Function called when password input value changes */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Max password length accepted */\\r\\n  maxLength: PropTypes.number,\\r\\n\\r\\n  /** Placeholder displayed when no password is entered */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Set to true to show the toggle for displaying the currently entered password */\\r\\n  showVisibilityToggle: PropTypes.bool,\\r\\n\\r\\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\r\\n  quality: PropTypes.number,\\r\\n\\r\\n  /** Validation error to display */\\r\\n  error: PropTypes.string\\r\\n};\\r\\n\\r\\nPasswordInput.defaultProps = {\\r\\n  maxLength: 50,\\r\\n  showVisibilityToggle: false,\\r\\n  label: 'Password'\\r\\n};\\r\\n\\r\\nexport default PasswordInput;\",\"examples\":[{\"name\":\"ExampleAllFeatures\",\"description\":\"All features enabled\",\"code\":\"import React from 'react';\\r\\nimport PasswordInput from 'am-react-abebe/PasswordInput';\\r\\n\\r\\n/** All features enabled */\\r\\nclass ExampleAllFeatures extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n\\r\\n    this.state = {\\r\\n      password: ''\\r\\n    };\\r\\n  }\\r\\n\\r\\n  getQuality() {\\r\\n    const length = this.state.password.length;\\r\\n    return length > 10 ? 100 : length * 10;\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <div>\\r\\n        <PasswordInput\\r\\n          htmlId=\\\"password-input-example-all-features\\\"\\r\\n          name=\\\"password\\\"\\r\\n          onChange={ event => this.setState({ password: event.target.value })}\\r\\n          value={this.state.password}\\r\\n          minLength={8}\\r\\n          placeholder=\\\"Enter password\\\"\\r\\n          showVisibilityToggle\\r\\n          quality={this.getQuality()}\\r\\n          {...this.props} />\\r\\n      </div>\\r\\n    )\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default ExampleAllFeatures;\"}]},{\"name\":\"ProgressBar\",\"description\":\"\",\"props\":{\"percent\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"\"},\"width\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Bar width\"},\"height\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Bar height\",\"defaultValue\":{\"value\":\"5\",\"computed\":false}}},\"code\":\"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\n\\r\\nclass ProgressBar extends React.Component {\\r\\n    static propTypes = {\\r\\n       // Percent of progress completed \\r\\n        percent: PropTypes.number.isRequired,\\r\\n      \\r\\n        /** Bar width */\\r\\n        width: PropTypes.number.isRequired,\\r\\n      \\r\\n        /** Bar height */\\r\\n        height: PropTypes.number\\r\\n      };\\r\\n      \\r\\n      static defaultProps = {\\r\\n        height: 5\\r\\n      };\\r\\n  getColor = (percent) => {\\r\\n    if (this.props.percent === 100) return 'green';\\r\\n    return this.props.percent > 50 ? 'lightgreen' : 'red';\\r\\n  }\\r\\n\\r\\n  getWidthAsPercentOfTotalWidth = () => {\\r\\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    const {percent, width, height} = this.props;\\r\\n    return (\\r\\n      <div style={{border: 'solid 1px lightgray', width: width}}>\\r\\n        <div style={{\\r\\n          width: this.getWidthAsPercentOfTotalWidth(),\\r\\n          height,\\r\\n          backgroundColor: this.getColor(percent)\\r\\n        }} />\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\n /**ProgressBar.propTypes = {\\r\\n  Percent of progress completed \\r\\n  percent: PropTypes.number.isRequired,\\r\\n\\r\\n  /** Bar width \\r\\n  width: PropTypes.number.isRequired,\\r\\n\\r\\n  /** Bar height \\r\\n  height: PropTypes.number\\r\\n};\\r\\n\\r\\nProgressBar.defaultProps = {\\r\\n  height: 5\\r\\n};*/\\r\\n\\r\\nexport default ProgressBar;\",\"examples\":[{\"name\":\"Example100Percent\",\"description\":\"100% progress and height 10px\",\"code\":\"import React from 'react';\\r\\nimport ProgressBar from 'am-react-abebe/ProgressBar';\\r\\n\\r\\n/** 100% progress and height 10px */\\r\\nexport default function Example10Percent() {\\r\\n  return <ProgressBar percent={100} width={150}  height={10} />\\r\\n}\"},{\"name\":\"Example10Percent\",\"description\":\"10% progress\",\"code\":\"import React from 'react';\\r\\nimport ProgressBar from 'am-react-abebe/ProgressBar';\\r\\n\\r\\n/** 10% progress */\\r\\nexport default function Example10Percent() {\\r\\n  return <ProgressBar percent={10} width={150} />\\r\\n}\"},{\"name\":\"Example70Percent\",\"description\":\"70% progress\",\"code\":\"import React from 'react';\\r\\nimport ProgressBar from 'am-react-abebe/ProgressBar';\\r\\n\\r\\n/** 70% progress */\\r\\nexport default function Example10Percent() {\\r\\n  return <ProgressBar percent={70} width={150} />\\r\\n}\"}]},{\"name\":\"RegistrationForm\",\"description\":\"Registration form with built-in validation.\",\"props\":{\"confirmationMessage\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message displayed upon successful submission\",\"defaultValue\":{\"value\":\"\\\"Thanks for registering!\\\"\",\"computed\":false}},\"onSubmit\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Called when form is submitted\"},\"minPasswordLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Minimum password length\",\"defaultValue\":{\"value\":\"8\",\"computed\":false}}},\"code\":\"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport TextInput from '../TextInput';\\r\\nimport PasswordInput from '../PasswordInput';\\r\\n\\r\\n/** Registration form with built-in validation. */\\r\\nclass RegistrationForm extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n\\r\\n    this.state = {\\r\\n      user: {\\r\\n        email: '',\\r\\n        password: ''\\r\\n      },\\r\\n      errors: {},\\r\\n      submitted: false,\\r\\n    };\\r\\n  }\\r\\n\\r\\n  onChange = (event) => {\\r\\n    const user = this.state.user;\\r\\n    user[event.target.name] = event.target.value;\\r\\n    this.setState({user});\\r\\n  }\\r\\n\\r\\n  // Returns a number from 0 to 100 that represents password quality.\\r\\n  // For simplicity, just returning % of min length entered.\\r\\n  // Could enhance with checks for number, special char, unique characters, etc.\\r\\n  passwordQuality(password) {\\r\\n    if (!password) return null;\\r\\n    if (password.length >= this.props.minPasswordLength) return 100;\\r\\n    const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10);\\r\\n    return percentOfMinLength;\\r\\n  }\\r\\n\\r\\n  validate({email, password}) {\\r\\n    const errors = {};\\r\\n    const {minPasswordLength} = this.props;\\r\\n\\r\\n    if (!email) errors.email = 'Email required.';\\r\\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\\r\\n\\r\\n    this.setState({errors});\\r\\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\\r\\n    return formIsValid;\\r\\n  }\\r\\n\\r\\n  onSubmit = () => {\\r\\n    const {user} = this.state;\\r\\n    const formIsValid = this.validate(user);\\r\\n    if (formIsValid) {\\r\\n      this.props.onSubmit(user);\\r\\n      this.setState({submitted: true});\\r\\n    }\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    const {errors, submitted} = this.state;\\r\\n    const {email, password} = this.state.user;\\r\\n\\r\\n    return (\\r\\n      submitted ?\\r\\n      <h2>{this.props.confirmationMessage}</h2> :\\r\\n      <div>\\r\\n        <TextInput\\r\\n          htmlId=\\\"registration-form-email\\\"\\r\\n          name=\\\"email\\\"\\r\\n          onChange={this.onChange}\\r\\n          label=\\\"Email\\\"\\r\\n          value={email}\\r\\n          error={errors.email}\\r\\n          required />\\r\\n\\r\\n        <PasswordInput\\r\\n          htmlId=\\\"registration-form-password\\\"\\r\\n          name=\\\"password\\\"\\r\\n          value={password}\\r\\n          onChange={this.onChange}\\r\\n          quality={this.passwordQuality(password)}\\r\\n          showVisibilityToggle\\r\\n          maxLength={50}\\r\\n          error={errors.password} />\\r\\n\\r\\n        <input type=\\\"submit\\\" value=\\\"Register\\\" onClick={this.onSubmit} />\\r\\n      </div>\\r\\n    )\\r\\n  }\\r\\n}\\r\\n\\r\\nRegistrationForm.propTypes = {\\r\\n  /** Message displayed upon successful submission */\\r\\n  confirmationMessage: PropTypes.string,\\r\\n\\r\\n  /** Called when form is submitted */\\r\\n  onSubmit: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Minimum password length */\\r\\n  minPasswordLength: PropTypes.number\\r\\n}\\r\\n\\r\\nRegistrationForm.defaultProps = {\\r\\n  confirmationMessage: \\\"Thanks for registering!\\\",\\r\\n  minPasswordLength: 8\\r\\n};\\r\\n\\r\\nexport default RegistrationForm;\",\"examples\":[{\"name\":\"ExampleRegistrationForm\",\"description\":\"\",\"code\":\"import React from 'react';\\r\\nimport RegistrationForm from 'am-react-abebe/RegistrationForm';\\r\\n\\r\\nexport default class ExampleRegistrationForm extends React.Component {\\r\\n  onSubmit = (user) => {\\r\\n    console.log(user);\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    return <RegistrationForm onSubmit={this.onSubmit} />\\r\\n  }\\r\\n}\"}]},{\"name\":\"TextInput\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport Label from '../Label';\\r\\n\\r\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\r\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\r\\n  return (\\r\\n    <div style={{marginBottom: 16}}>\\r\\n      <Label htmlFor={htmlId} label={label} required={required} />\\r\\n      <input\\r\\n        id={htmlId}\\r\\n        type={type}\\r\\n        name={name}\\r\\n        placeholder={placeholder}\\r\\n        value={value}\\r\\n        onChange={onChange}\\r\\n        style={error && {border: 'solid 1px red'}}\\r\\n        {...props}/>\\r\\n        {children}\\r\\n      {error && <div className=\\\"error\\\" style={{color: 'red'}}>{error}</div>}\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nTextInput.propTypes = {\\r\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input label */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input type */\\r\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\r\\n\\r\\n  /** Mark label with asterisk if set to true */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occurs */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node\\r\\n};\\r\\n\\r\\nexport default TextInput;\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required TextBox with error\",\"code\":\"import React from 'react';\\r\\nimport TextInput from 'am-react-abebe/TextInput';\\r\\n\\r\\n/** Required TextBox with error */\\r\\nexport default class ExampleError extends React.Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <TextInput\\r\\n        htmlId=\\\"example-optional\\\"\\r\\n        label=\\\"First Name\\\"\\r\\n        name=\\\"firstname\\\"\\r\\n        onChange={() => {}}\\r\\n        required\\r\\n        error=\\\"First name is required.\\\"\\r\\n       />\\r\\n    )\\r\\n  }\\r\\n}\"},{\"name\":\"ExampleOptional\",\"description\":\"Optional TextBox\",\"code\":\"import React from 'react';\\r\\nimport TextInput from 'am-react-abebe/TextInput';\\r\\n\\r\\n/** Optional TextBox */\\r\\nexport default class ExampleOptional extends React.Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <TextInput\\r\\n        htmlId=\\\"example-optional\\\"\\r\\n        label=\\\"First Name\\\"\\r\\n        name=\\\"firstname\\\"\\r\\n        onChange={() => {}}\\r\\n       />\\r\\n    )\\r\\n  }\\r\\n}\"}]},{\"name\":\"TextInputBEM\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport Label from '../Label';\\r\\n\\r\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\r\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\r\\n  return (\\r\\n    <div className=\\\"textinput\\\">\\r\\n      <Label htmlFor={htmlId} label={label} required={required} />\\r\\n      <input\\r\\n        id={htmlId}\\r\\n        type={type}\\r\\n        name={name}\\r\\n        placeholder={placeholder}\\r\\n        value={value}\\r\\n        onChange={onChange}\\r\\n       className={error && 'textinput__input--state-error'}\\r\\n        {...props}/>\\r\\n        {children}\\r\\n      {error && <div className=\\\"textinput__error\\\" >{error}</div>}\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nTextInput.propTypes = {\\r\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input label */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input type */\\r\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\r\\n\\r\\n  /** Mark label with asterisk if set to true */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occurs */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node\\r\\n};\\r\\n\\r\\nexport default TextInput;\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required TextBox with error\",\"code\":\"import React from 'react';\\r\\nimport TextInputBEM from 'am-react-abebe/TextInputBEM';\\r\\n\\r\\n/** Required TextBox with error */\\r\\nexport default class ExampleError extends React.Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <TextInputBEM\\r\\n        htmlId=\\\"example-optional\\\"\\r\\n        label=\\\"First Name\\\"\\r\\n        name=\\\"firstname\\\"\\r\\n        onChange={() => {}}\\r\\n        required\\r\\n        error=\\\"First name is required.\\\"\\r\\n       />\\r\\n    )\\r\\n  }\\r\\n}\"}]},{\"name\":\"TextInputCSSModules\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport Label from '../Label';\\r\\nimport styles  from './textInput.module.css';\\r\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\r\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\r\\n  return (\\r\\n    <div className={styles.fieldset}>\\r\\n      <Label htmlFor={htmlId} label={label} required={required} />\\r\\n      <input\\r\\n        id={htmlId}\\r\\n        type={type}\\r\\n        name={name}\\r\\n        placeholder={placeholder}\\r\\n        value={value}\\r\\n        onChange={onChange}\\r\\n        className={error && styles.inputError}\\r\\n        {...props}/>\\r\\n        {children}\\r\\n      {error && <div className={styles.errror}>{error}</div>}\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nTextInput.propTypes = {\\r\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input label */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input type */\\r\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\r\\n\\r\\n  /** Mark label with asterisk if set to true */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occurs */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node\\r\\n};\\r\\n\\r\\nexport default TextInput;\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required TextBox with error\",\"code\":\"import React from 'react';\\r\\nimport TextInputCSSModules from 'am-react-abebe/TextInputCSSModules';\\r\\n\\r\\n/** Required TextBox with error */\\r\\nexport default class ExampleError extends React.Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <TextInputCSSModules\\r\\n        htmlId=\\\"example-optional\\\"\\r\\n        label=\\\"First Name\\\"\\r\\n        name=\\\"firstname\\\"\\r\\n        onChange={() => {}}\\r\\n        required\\r\\n        error=\\\"First name is required.\\\"\\r\\n       />\\r\\n    )\\r\\n  }\\r\\n}\"}]},{\"name\":\"TextInputStyledComponents\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport Label from '../Label';\\r\\nimport styled from 'styled-components';\\r\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\r\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\r\\n    const Error = styled.div`\\r\\n    color: red;\\r\\n    `;\\r\\n    const Input = styled.input`\\r\\n    border: ${error && 'solid 1px red'};\\r\\n    display: block;\\r\\n  `;\\r\\n\\r\\n  const Fieldset = styled.div`\\r\\n    margin-bottom: 16px;\\r\\n  `;\\r\\n\\r\\n  return (\\r\\n    <Fieldset>\\r\\n      <Label htmlFor={htmlId} label={label} required={required} />\\r\\n      <Input\\r\\n        id={htmlId}\\r\\n        type={type}\\r\\n        name={name}\\r\\n        placeholder={placeholder}\\r\\n        value={value}\\r\\n        onChange={onChange}\\r\\n        {...props}/>\\r\\n        {children}\\r\\n      {error && <Error>{error}</Error>}\\r\\n    </Fieldset>\\r\\n  );\\r\\n};\\r\\n\\r\\nTextInput.propTypes = {\\r\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input label */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input type */\\r\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\r\\n\\r\\n  /** Mark label with asterisk if set to true */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occurs */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node\\r\\n};\\r\\n\\r\\nexport default TextInput;\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required TextBox with error\",\"code\":\"import React from 'react';\\r\\nimport TextInput from 'am-react-abebe/TextInputStyledComponents';\\r\\n\\r\\n/** Required TextBox with error */\\r\\nexport default class ExampleError extends React.Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <TextInput\\r\\n        htmlId=\\\"example-optional\\\"\\r\\n        label=\\\"First Name\\\"\\r\\n        name=\\\"firstname\\\"\\r\\n        onChange={() => {}}\\r\\n        required\\r\\n        error=\\\"First name is required.\\\"\\r\\n       />\\r\\n    )\\r\\n  }\\r\\n}\"}]}]","import React from 'react';\r\nimport EyeIcon from 'am-react-abebe/EyeIcon';\r\n\r\nexport default function EyeIconExample() {\r\n  return <EyeIcon />;\r\n}","var map = {\n\t\"./EyeIcon/Example\": 23,\n\t\"./EyeIcon/Example.js\": 23,\n\t\"./HelloWorld/ExampleHelloWorld\": 32,\n\t\"./HelloWorld/ExampleHelloWorld.js\": 32,\n\t\"./Label/ExampleOptional\": 24,\n\t\"./Label/ExampleOptional.js\": 24,\n\t\"./Label/ExampleRequired\": 25,\n\t\"./Label/ExampleRequired.js\": 25,\n\t\"./PasswordInput/ExampleAllFeatures\": 26,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 26,\n\t\"./ProgressBar/Example100Percent\": 27,\n\t\"./ProgressBar/Example100Percent.js\": 27,\n\t\"./ProgressBar/Example10Percent\": 28,\n\t\"./ProgressBar/Example10Percent.js\": 28,\n\t\"./ProgressBar/Example70Percent\": 29,\n\t\"./ProgressBar/Example70Percent.js\": 29,\n\t\"./RegistrationForm/ExampleRegistrationForm\": 33,\n\t\"./RegistrationForm/ExampleRegistrationForm.js\": 33,\n\t\"./TextInput/ExampleError\": 30,\n\t\"./TextInput/ExampleError.js\": 30,\n\t\"./TextInput/ExampleOptional\": 31,\n\t\"./TextInput/ExampleOptional.js\": 31,\n\t\"./TextInputBEM/ExampleError\": 34,\n\t\"./TextInputBEM/ExampleError.js\": 34,\n\t\"./TextInputCSSModules/ExampleError\": 35,\n\t\"./TextInputCSSModules/ExampleError.js\": 35,\n\t\"./TextInputStyledComponents/ExampleError\": 36,\n\t\"./TextInputStyledComponents/ExampleError.js\": 36\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 236;","import React from 'react';\r\nimport Label from 'am-react-abebe/Label';\r\n\r\n/** Optional label */\r\nexport default function ExampleOptional() {\r\n  return <Label htmlFor=\"test\" label=\"test\" />\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Navigation = ({components}) => {\r\n  return (\r\n    <ul className=\"navigation\">\r\n      {\r\n        components.map( name => {\r\n          return (\r\n            <li key={name}>\r\n              <a href={`#${name}`}>{name}</a>\r\n            </li>\r\n          )\r\n        })\r\n      }\r\n    </ul>\r\n  )\r\n}\r\n\r\nNavigation.propTypes = {\r\n  components: PropTypes.array.isRequired\r\n};\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import hljs from 'highlight.js/lib/highlight';\r\n// import javascript from 'highlight.js/lib/languages/javascript';\r\nimport Highlight from 'react-highlight';\r\n// This way is easy, but adds 170K gzipped to bundle since all langs are included.\r\n\r\n\r\nclass CodeExample extends React.Component {\r\n  componentDidMount() {\r\n    //  hljs.registerLanguage('javascript', javascript);\r\n   // hljs.highlightBlock(this.element);\r\n  }\r\n  \r\n\r\n  render() {\r\n    return (\r\n      <pre ref={ref => { this.element = ref }}>\r\n        <Highlight>\r\n        <code>\r\n          {this.props.children}\r\n        </code></Highlight>\r\n      </pre>\r\n    )\r\n  }\r\n}\r\n\r\nCodeExample.propTypes = {\r\n  children: PropTypes.string.isRequired\r\n}\r\n\r\nexport default CodeExample;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CodeExample from './CodeExample';\r\n\r\nclass Example extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { showCode: false };\r\n  }\r\n\r\n  toggleCode = event => {\r\n    event.preventDefault();\r\n    this.setState(prevState => {\r\n      return {showCode: !prevState.showCode};\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {showCode} = this.state;\r\n    const {code, description, name} = this.props.example;\r\n    // Must use CommonJS require to dynamically require because ES Modules must be statically analyzable.\r\n    const ExampleComponent = require(`./examples/${this.props.componentName}/${name}`).default;  // dynamically importing component \r\n    return (\r\n      <div className=\"example\">\r\n        {description && <h4>{description}</h4> }\r\n\r\n        <ExampleComponent />\r\n\r\n        <p>\r\n          <a href=\"\" onClick={this.toggleCode}>\r\n            {showCode ? \"Hide\" : \"Show\"} Code\r\n          </a>\r\n        </p>\r\n\r\n    {showCode && <CodeExample>{code}</CodeExample>}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nExample.propTypes = {\r\n  example: PropTypes.object.isRequired,\r\n  componentName: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Example;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Props = ({props}) => {\r\n  return (\r\n    <table className=\"props\">\r\n      <thead>\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Description</th>\r\n          <th>Type</th>\r\n          <th>Default</th>\r\n          <th>Required</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n      {\r\n        Object.keys(props).map(key => {\r\n          return (\r\n            <tr key={key}>\r\n              <td>{key}</td>\r\n              <td>{props[key].description}</td>\r\n              <td>{props[key].type.name}</td>\r\n              <td>{props[key].defaultValue && props[key].defaultValue.value}</td>\r\n              <td>{props[key].required && \"X\"}</td>\r\n            </tr>\r\n          );\r\n        })\r\n      }\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nProps.propTypes = {\r\n  props: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Props;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Example from './Example';\r\nimport Props from './Props';\r\n\r\nconst ComponentPage = ({component}) => {\r\n  const {name, description, props, examples} = component;\r\n\r\n  return (\r\n    <div className=\"componentpage\">\r\n      <h2>{name}</h2>\r\n      <p>{description}</p>\r\n\r\n      <h3>Example{examples.length > 1 && \"s\"}</h3>\r\n      {\r\n        examples.length > 0 ?\r\n        examples.map( example => <Example key={example.code} example={example} componentName={name} /> ) :\r\n        \"No examples exist.\"\r\n      }\r\n\r\n      <h3>Props</h3>\r\n      {\r\n        props ?\r\n        <Props props={props} /> :\r\n        \"This component accepts no props.\"\r\n      }\r\n    </div>\r\n  )\r\n};\r\n\r\nComponentPage.propTypes = {\r\n  component: PropTypes.object.isRequired\r\n};\r\n\r\nexport default ComponentPage;","import React from 'react';\r\nimport Navigation from './Navigation';\r\nimport ComponentPage from './ComponentPage';\r\nimport componentData from '../../config/componentData';\r\n\r\nexport default class Docs extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      route: window.location.hash.substr(1)\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('hashchange', () => {\r\n      this.setState({route: window.location.hash.substr(1)})\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const {route} = this.state;\r\n    const component = route ? componentData.filter( component => component.name === route)[0] : componentData[0];\r\n\r\n    return (\r\n      <div>\r\n        <Navigation components={componentData.map(component => component.name)} />\r\n        <ComponentPage component={component} />\r\n      </div>\r\n    )\r\n  }\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport Docs from './docs/Docs';\nimport reportWebVitals from './reportWebVitals';\n// import '../node_modules/highlight.js/styles/ocean.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Docs />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React from 'react';\r\nimport Label from 'am-react-abebe/Label';\r\n\r\n/** Required label */\r\nexport default function ExampleRequired() {\r\n  return <Label htmlFor=\"test\" label=\"test\" required />\r\n}","import React from 'react';\r\nimport PasswordInput from 'am-react-abebe/PasswordInput';\r\n\r\n/** All features enabled */\r\nclass ExampleAllFeatures extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      password: ''\r\n    };\r\n  }\r\n\r\n  getQuality() {\r\n    const length = this.state.password.length;\r\n    return length > 10 ? 100 : length * 10;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <PasswordInput\r\n          htmlId=\"password-input-example-all-features\"\r\n          name=\"password\"\r\n          onChange={ event => this.setState({ password: event.target.value })}\r\n          value={this.state.password}\r\n          minLength={8}\r\n          placeholder=\"Enter password\"\r\n          showVisibilityToggle\r\n          quality={this.getQuality()}\r\n          {...this.props} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ExampleAllFeatures;","import React from 'react';\r\nimport ProgressBar from 'am-react-abebe/ProgressBar';\r\n\r\n/** 100% progress and height 10px */\r\nexport default function Example10Percent() {\r\n  return <ProgressBar percent={100} width={150}  height={10} />\r\n}","import React from 'react';\r\nimport ProgressBar from 'am-react-abebe/ProgressBar';\r\n\r\n/** 10% progress */\r\nexport default function Example10Percent() {\r\n  return <ProgressBar percent={10} width={150} />\r\n}","import React from 'react';\r\nimport ProgressBar from 'am-react-abebe/ProgressBar';\r\n\r\n/** 70% progress */\r\nexport default function Example10Percent() {\r\n  return <ProgressBar percent={70} width={150} />\r\n}","import React from 'react';\r\nimport TextInput from 'am-react-abebe/TextInput';\r\n\r\n/** Required TextBox with error */\r\nexport default class ExampleError extends React.Component {\r\n  render() {\r\n    return (\r\n      <TextInput\r\n        htmlId=\"example-optional\"\r\n        label=\"First Name\"\r\n        name=\"firstname\"\r\n        onChange={() => {}}\r\n        required\r\n        error=\"First name is required.\"\r\n       />\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport TextInput from 'am-react-abebe/TextInput';\r\n\r\n/** Optional TextBox */\r\nexport default class ExampleOptional extends React.Component {\r\n  render() {\r\n    return (\r\n      <TextInput\r\n        htmlId=\"example-optional\"\r\n        label=\"First Name\"\r\n        name=\"firstname\"\r\n        onChange={() => {}}\r\n       />\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n/** A super lame component that says hello world with a custom message  */\r\nfunction HelloWorld({message}){\r\n\r\n    return <div>Hello{message}</div>\r\n}\r\nHelloWorld.propTypes = {\r\n    /** Message to display */\r\n    message: PropTypes.string\r\n}\r\nHelloWorld.defaultProps ={\r\n    message: 'world'\r\n}\r\nexport default HelloWorld;","import React from 'react';\r\nimport HelloWorld from 'am-react-abebe/HelloWorld';\r\n\r\n/** Custom message */\r\nexport default function ExampleHelloWorld() {\r\n  return <HelloWorld message=\"Pluralsight viewers!\" />\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TextInput from '../TextInput';\r\nimport PasswordInput from '../PasswordInput';\r\n\r\n/** Registration form with built-in validation. */\r\nclass RegistrationForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      user: {\r\n        email: '',\r\n        password: ''\r\n      },\r\n      errors: {},\r\n      submitted: false,\r\n    };\r\n  }\r\n\r\n  onChange = (event) => {\r\n    const user = this.state.user;\r\n    user[event.target.name] = event.target.value;\r\n    this.setState({user});\r\n  }\r\n\r\n  // Returns a number from 0 to 100 that represents password quality.\r\n  // For simplicity, just returning % of min length entered.\r\n  // Could enhance with checks for number, special char, unique characters, etc.\r\n  passwordQuality(password) {\r\n    if (!password) return null;\r\n    if (password.length >= this.props.minPasswordLength) return 100;\r\n    const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10);\r\n    return percentOfMinLength;\r\n  }\r\n\r\n  validate({email, password}) {\r\n    const errors = {};\r\n    const {minPasswordLength} = this.props;\r\n\r\n    if (!email) errors.email = 'Email required.';\r\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\r\n\r\n    this.setState({errors});\r\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\r\n    return formIsValid;\r\n  }\r\n\r\n  onSubmit = () => {\r\n    const {user} = this.state;\r\n    const formIsValid = this.validate(user);\r\n    if (formIsValid) {\r\n      this.props.onSubmit(user);\r\n      this.setState({submitted: true});\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {errors, submitted} = this.state;\r\n    const {email, password} = this.state.user;\r\n\r\n    return (\r\n      submitted ?\r\n      <h2>{this.props.confirmationMessage}</h2> :\r\n      <div>\r\n        <TextInput\r\n          htmlId=\"registration-form-email\"\r\n          name=\"email\"\r\n          onChange={this.onChange}\r\n          label=\"Email\"\r\n          value={email}\r\n          error={errors.email}\r\n          required />\r\n\r\n        <PasswordInput\r\n          htmlId=\"registration-form-password\"\r\n          name=\"password\"\r\n          value={password}\r\n          onChange={this.onChange}\r\n          quality={this.passwordQuality(password)}\r\n          showVisibilityToggle\r\n          maxLength={50}\r\n          error={errors.password} />\r\n\r\n        <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nRegistrationForm.propTypes = {\r\n  /** Message displayed upon successful submission */\r\n  confirmationMessage: PropTypes.string,\r\n\r\n  /** Called when form is submitted */\r\n  onSubmit: PropTypes.func.isRequired,\r\n\r\n  /** Minimum password length */\r\n  minPasswordLength: PropTypes.number\r\n}\r\n\r\nRegistrationForm.defaultProps = {\r\n  confirmationMessage: \"Thanks for registering!\",\r\n  minPasswordLength: 8\r\n};\r\n\r\nexport default RegistrationForm;","import React from 'react';\r\nimport RegistrationForm from 'am-react-abebe/RegistrationForm';\r\n\r\nexport default class ExampleRegistrationForm extends React.Component {\r\n  onSubmit = (user) => {\r\n    console.log(user);\r\n  }\r\n\r\n  render() {\r\n    return <RegistrationForm onSubmit={this.onSubmit} />\r\n  }\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Label from '../Label';\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\r\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\r\n  return (\r\n    <div className=\"textinput\">\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n       className={error && 'textinput__input--state-error'}\r\n        {...props}/>\r\n        {children}\r\n      {error && <div className=\"textinput__error\" >{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nTextInput.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input type */\r\n  type: PropTypes.oneOf(['text', 'number', 'password']),\r\n\r\n  /** Mark label with asterisk if set to true */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occurs */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default TextInput;","import React from 'react';\r\nimport TextInputBEM from 'am-react-abebe/TextInputBEM';\r\n\r\n/** Required TextBox with error */\r\nexport default class ExampleError extends React.Component {\r\n  render() {\r\n    return (\r\n      <TextInputBEM\r\n        htmlId=\"example-optional\"\r\n        label=\"First Name\"\r\n        name=\"firstname\"\r\n        onChange={() => {}}\r\n        required\r\n        error=\"First name is required.\"\r\n       />\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Label from '../Label';\r\nimport styles  from './textInput.module.css';\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\r\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\r\n  return (\r\n    <div className={styles.fieldset}>\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        className={error && styles.inputError}\r\n        {...props}/>\r\n        {children}\r\n      {error && <div className={styles.errror}>{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nTextInput.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input type */\r\n  type: PropTypes.oneOf(['text', 'number', 'password']),\r\n\r\n  /** Mark label with asterisk if set to true */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occurs */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default TextInput;","import React from 'react';\r\nimport TextInputCSSModules from 'am-react-abebe/TextInputCSSModules';\r\n\r\n/** Required TextBox with error */\r\nexport default class ExampleError extends React.Component {\r\n  render() {\r\n    return (\r\n      <TextInputCSSModules\r\n        htmlId=\"example-optional\"\r\n        label=\"First Name\"\r\n        name=\"firstname\"\r\n        onChange={() => {}}\r\n        required\r\n        error=\"First name is required.\"\r\n       />\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Label from '../Label';\r\nimport styled from 'styled-components';\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\r\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\r\n    const Error = styled.div`\r\n    color: red;\r\n    `;\r\n    const Input = styled.input`\r\n    border: ${error && 'solid 1px red'};\r\n    display: block;\r\n  `;\r\n\r\n  const Fieldset = styled.div`\r\n    margin-bottom: 16px;\r\n  `;\r\n\r\n  return (\r\n    <Fieldset>\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <Input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        {...props}/>\r\n        {children}\r\n      {error && <Error>{error}</Error>}\r\n    </Fieldset>\r\n  );\r\n};\r\n\r\nTextInput.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input type */\r\n  type: PropTypes.oneOf(['text', 'number', 'password']),\r\n\r\n  /** Mark label with asterisk if set to true */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occurs */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default TextInput;","import React from 'react';\r\nimport TextInput from 'am-react-abebe/TextInputStyledComponents';\r\n\r\n/** Required TextBox with error */\r\nexport default class ExampleError extends React.Component {\r\n  render() {\r\n    return (\r\n      <TextInput\r\n        htmlId=\"example-optional\"\r\n        label=\"First Name\"\r\n        name=\"firstname\"\r\n        onChange={() => {}}\r\n        required\r\n        error=\"First name is required.\"\r\n       />\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Label with required field display, htmlFor, and block styling */\r\nfunction Label({htmlFor, label, required}) {\r\n  return (\r\n    <label style={{display: 'block'}} htmlFor={htmlFor}>\r\n      {label} { required && <span style={{color: 'red'}}> *</span> }\r\n    </label>\r\n  )\r\n}\r\n\r\nLabel.propTypes = {\r\n  /** HTML ID for associated input */\r\n  htmlFor: PropTypes.string.isRequired,\r\n\r\n  /** Label text */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Display asterisk after label if true */\r\n  required: PropTypes.bool\r\n};\r\n\r\nexport default Label;"],"sourceRoot":""}